#!@PYTHON@

import os
import logging
import gettext

from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)
import dbus.service
from currencyconverter.api import Api

from gi.repository import GLib, Gio

SEARCH_BUS_NAME = 'org.gnome.Shell.SearchProvider2'
SBN = dict(dbus_interface=SEARCH_BUS_NAME)

CLIPBOARD_PREFIX = 'copy-to-clipboard'
ERROR_PREFIX = 'converter-error'

gettext.install('currencyconverter', '@localedir@')
_ = gettext.gettext

class SearchService(dbus.service.Object):
    bus_name = '@APP_ID@.SearchProvider'
    object_path = "/" + bus_name.replace(".", "/")

    def __init__(self):
        self.session_bus = dbus.SessionBus()
        self.is_with_argument=False
        bus_name = dbus.service.BusName(self.bus_name, bus=self.session_bus)
        dbus.service.Object.__init__(self, bus_name, self.object_path)

        self.src_currency = ''
        self.dest_currency = ''
        self.currency_data = {
            "from_value": 1,
            "to_value": None,
            "currency_value": None,
        }
        self.settings = Gio.Settings.new('@APP_ID@')
        self.dest_currencies = {}
        self._load_converter()

    def _load_converter(self):
        self.src_currency = self.settings.get_string('src-currencies')
        self.dest_currency = self.settings.get_string('dest-currencies')
        self.currency_data["currency_value"] = Api().request(self.src_currency, self.dest_currency)
        self.currency_data['to_value'] = self.currency_data["currency_value"]["value"]

    def _is_number(self, value):
        if not value:
            return False
        try:
            f=float(value)
            return True
        except ValueError:
            return False

    def _converter(self, src_currency_value):
        if self.src_currency != self.dest_currency:
            error_id = ERROR_PREFIX
            try:
                dest_currency_value = float(self.currency_data["to_value"]) * float(self.currency_data["from_value"])
                self.dest_currencies[src_currency_value] = str(dest_currency_value)
                return src_currency_value
            except Exception as exc:
                logging.error(exc)

    @dbus.service.method(in_signature='as', out_signature='as', **SBN)
    def GetInitialResultSet(self, terms):
        value = ' '.join(terms)
        if self._is_number(value):
            if not self.currency_data['to_value']:
                return self.GetInitialResultSet(terms)
            self.currency_data['from_value'] = float(value)
            converter_id = self._converter(value)
            results = [converter_id]
            return results
        return [
                _(value)
        ]

    @dbus.service.method(in_signature='asas', out_signature='as', **SBN)
    def GetSubsearchResultSet(self, _previous_results, new_terms):
        return self.GetInitialResultSet(new_terms)

    @dbus.service.method(in_signature='as', out_signature='aa{sv}', **SBN)
    def GetResultMetas(self, ids):
        converter_id = ids[0]
        if len(ids) == 1:
            value = converter_id
            if converter_id in self.dest_currencies:
              value = self.dest_currencies[converter_id]
            return [{
            'id': converter_id,
            'name': value,
            }]
        elif (
            len(ids) == 2 and converter_id in self.dest_currencies
            and ids[1] == CLIPBOARD_PREFIX + ids[0]
        ):
            value = self.dest_currencies[converter_id]
            description = 'ola'
            self.dest_currencies.clear()
            return [
                {
                  'id': converter_id,
                  'name': value,
                  'description': description,
                },
                {
                  'id': ids[1],
                  'name': _('Copy'),
                  'description': _('Copy currency to clipboard'),
                  'clipboardText': value
                }
            ]

        else:
            return [
                dict(
                    id=id,
                    name='Rapaz',
                )
                for id in ids
            ]

    @dbus.service.method(in_signature='sasu', **SBN)
    def ActivateResult(self, result_id, terms, timestamp):
        if not result_id.startswith(CLIPBOARD_PREFIX):
            self.LaunchSearch(terms, timestamp)

    @dbus.service.method(in_signature='asu', terms='as', timestamp='u', **SBN)
    def LaunchSearch(self, terms, timestamp):
        pass

if __name__ == "__main__":
    SearchService()
    GLib.MainLoop().run()
