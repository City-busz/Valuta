#!@PYTHON@
# Copyright 2023 Ideve Core
# SPDX-License-Identifier: GPL-3.0-or-later

import sys
import logging
import locale
import gettext

import gi
gi.require_version('Soup', '3.0')
from gi.repository import GLib, Gio

from gi.repository import GLib, Gio
from valuta.define import CODES
from valuta.utils import Convertion

CLIPBOARD_PREFIX = 'copy-to-clipboard'
ERROR_PREFIX = 'translation-error'

localedir = '@localedir@'
# langs_trans = gettext.translation('dialect-cldr-langs', localedir, fallback=True)
# ui_trans = gettext.translation('dialect', localedir, fallback=True)
# ui_trans.add_fallback(langs_trans)
# ui_trans.install(names=['gettext'])

locale.bindtextdomain('valuta', localedir)
locale.textdomain('valuta')

gettext.install('valuta', localedir)
_ = gettext.gettext

dbus_interface_description = '''
<!DOCTYPE node PUBLIC
'-//freedesktop//DTD D-BUS Object Introspection 1.0//EN'
'http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd'>
<node>
  <interface name="org.gnome.Shell.SearchProvider2">
    <method name="GetInitialResultSet">
      <arg type="as" name="terms" direction="in" />
      <arg type="as" name="results" direction="out" />
    </method>
    <method name="GetSubsearchResultSet">
      <arg type="as" name="previous_results" direction="in" />
      <arg type="as" name="terms" direction="in" />
      <arg type="as" name="results" direction="out" />
    </method>
    <method name="GetResultMetas">
      <arg type="as" name="identifiers" direction="in" />
      <arg type="aa{sv}" name="metas" direction="out" />
    </method>
    <method name="ActivateResult">
      <arg type="s" name="identifier" direction="in" />
      <arg type="as" name="terms" direction="in" />
      <arg type="u" name="timestamp" direction="in" />
    </method>
    <method name="LaunchSearch">
      <arg type="as" name="terms" direction="in" />
      <arg type="u" name="timestamp" direction="in" />
    </method>
  </interface>
</node>
'''

class ConvertionService:
  def __init__(self):
    self.currency_data = {
      "from_currency_value": 1,
      "to_currency_value": None,
      "currency_value": None,
    }
    self.settings = Gio.Settings.new('@APP_ID@')
    self.dest_currencies = {}
    self.from_currency = self.settings.get_string('src-currency')
    self.to_currency = self.settings.get_string('dest-currency')
    self.settings.connect("changed::src-currency", self.on_currencies_changed);
    self.settings.connect("changed::dest-currency", self.on_currencies_changed);

  def GetInitialResultSet(self, terms):
    value = ' '.join(terms)
    if self.is_number(value):
      self.currency_data['from_currency_value'] = float(value)
      converter_id = self.convertion(value)
      results = [converter_id]
      if not converter_id.startswith(ERROR_PREFIX):
        results.append(CLIPBOARD_PREFIX + value)
      return results

    value_splited = value.upper().split(' ')
    if len(value_splited) == 4:
      if value_splited[1] in CODES and value_splited[3] in CODES:
        if self.is_number(value_splited[0]):
          if value_splited[1] != self.from_currency or value_splited[3] != self.to_currency:
            self.settings.set_string('src-currency', value_splited[1])
            self.settings.set_string('dest-currency', value_splited[3])
            self.on_currencies_changed('', '')
            self.currency_data['from_currency_value'] = float(value_splited[0])
            converter_id = self.convertion(value)
            results = [converter_id]
            if not converter_id.startswith(ERROR_PREFIX):
              results.append(CLIPBOARD_PREFIX + value)
            return results
          else:
            self.currency_data['from_currency_value'] = float(value_splited[0])
            converter_id = self.convertion(value)
            results = [converter_id]
            if not converter_id.startswith(ERROR_PREFIX):
              results.append(CLIPBOARD_PREFIX + value)
            return results

  def GetSubsearchResultSet(self, _previous_results, new_terms):
    return self.GetInitialResultSet(new_terms)

  def GetResultMetas(self, ids):
    """Send destination currency value"""
    converter_id = ids[0]
    if len(ids) == 1:
      value = converter_id
      if converter_id in self.dest_currencies:
        value = self.dest_currencies[converter_id]
      return [{
        'id': GLib.Variant("s", converter_id),
        'name': GLib.Variant("s", value),
      }]

    elif (
      len(ids) == 2 and converter_id in self.dest_currencies
      and ids[1] == CLIPBOARD_PREFIX + ids[0]
    ):
      value = self.dest_currencies[converter_id]
      description = self.to_currency
      self.dest_currencies.clear()
      return [
        {
          'id': GLib.Variant("s", converter_id),
          'name': GLib.Variant("s", value),
          'description': GLib.Variant("s", description),
        },
        {
          'id': GLib.Variant("s", ids[1]),
          'name': GLib.Variant("s", _('Copy')),
          'description': GLib.Variant("s", _('Copy convertion to clipboard')),
          'clipboardText': GLib.Variant("s", value)
        }
      ]

    else:
      return [
        dict(
          id=GLib.Variant("s", id),
          name=GLib.Variant("s", id),
        )
        for id in ids
      ]

  def ActivateResult(self, result_id, terms, timestamp):
    if not result_id.startswith(CLIPBOARD_PREFIX):
      self.LaunchSearch(terms, timestamp)

  def LaunchSearch(self, terms, _timestamp):
    value = ' '.join(terms)
    splited_value = value.split(' ')
    if len(splited_value) == 4:
      GLib.spawn_async_with_pipes(
          None, ['@BIN@', '--src-currency-value', splited_value[3]], None,
          GLib.SpawnFlags.SEARCH_PATH, None
      )
    GLib.spawn_async_with_pipes(
      None, ['@BIN@', '--src-currency-value', value], None,
      GLib.SpawnFlags.SEARCH_PATH, None
    )

  def convertion(self, from_currency_value=None):
   if not self.from_currency == self.to_currency:
    error_id = ERROR_PREFIX + from_currency_value
    if not self.currency_data['to_currency_value']:
      self.currency_data['to_currency_value'] = Convertion(self.settings).convert_raw(1, self.from_currency, self.to_currency, self.settings.get_int("providers"))

    if self.currency_data['to_currency_value']:
      try:
        to_currency_value = float(self.currency_data["to_currency_value"]) * float(self.currency_data["from_currency_value"])
        self.dest_currencies[from_currency_value] = str(to_currency_value)
        return from_currency_value
      except Exception as exc:
        logging.error(exc)

    return error_id

  def is_number(self, value):
    if not value:
      return False
    try:
      f=float(value)
      return True
    except ValueError:
      return False

  def on_currencies_changed(self, widget, state):
    self.from_currency = self.settings.get_string('src-currency')
    self.to_currency = self.settings.get_string('dest-currency')
    self.currency_data['to_currency_value'] = None

class ConvertionServiceApplication(Gio.Application):
  def __init__(self):
    Gio.Application.__init__(self,
                             application_id='@APP_ID@.SearchProvider',
                             flags=Gio.ApplicationFlags.IS_SERVICE,
                             inactivity_timeout=10000)
    self.service_object = ConvertionService()
    self.search_interface = Gio.DBusNodeInfo.new_for_xml(dbus_interface_description).interfaces[0]

  def do_dbus_register(self, connection, object_path):
    try:
      connection.register_object(object_path=object_path,
                                 interface_info=self.search_interface,
                                 method_call_closure=self.on_dbus_method_call)
    except:
      self.quit()
      return False
    finally:
      return True

  def on_dbus_method_call(self, connection, sender, object_path, interface_name, method_name, parameters, invocation):
    self.hold()

    method = getattr(self.service_object, method_name)
    arguments = list(parameters.unpack())

    results = method(*arguments),
    if results == (None,):
      results = ()
    results_type = "(" + "".join(map(lambda argument_info: argument_info.signature, self.search_interface.lookup_method(method_name).out_args)) + ")"
    wrapped_results = GLib.Variant(results_type, results)

    invocation.return_value(wrapped_results)

    self.release()

if __name__ == "__main__":
    app = ConvertionServiceApplication()
    sys.exit(app.run())
