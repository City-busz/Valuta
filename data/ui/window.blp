using Gtk 4.0;
using Adw 1;

template CurrencyconverterWindow : Adw.ApplicationWindow {
  default-width: 400;
  default-height: 600;
  title: _("Currency Converter");

  Box {
  orientation: vertical;
    [titlebar]
    Adw.HeaderBar {
      styles [
        "flat",
      ]

      [end]
      MenuButton {
        icon-name: "open-menu-symbolic";
        menu-model: primary_menu;
      }
    }
    Adw.Clamp {
      orientation: vertical;
      Box {
        orientation: vertical;
        Box {
          orientation: vertical;
          halign: center;
          valign: center;
          spacing: 20;
          styles ["m", "card"]
          
          Box {
            styles ["gp", "pd"]
            homogeneous: true;
            vexpand: true;
            Entry from_value {
              changed => _test();
              styles ["pd", "m-e", "title-3"]
            }
            Stack stack {
              transition-type: crossfade;
              StackPage {
                name: "loading";
                child: WindowHandle {
                  Box {
                    orientation: vertical;
                    spacing: 12;
                    margin-top: 12;
                    margin-bottom: 12;
                    margin-start: 12;
                    margin-end: 12;
                    halign: center;
                    valign: center;

                    Spinner {
                      spinning: true;
                      width-request: 25;
                      height-request: 25;
                    }
                  }
                };
              }
              StackPage {
                name: "result";
                child: WindowHandle {
                  Entry to_value {
                    styles ["pd", "title-3"]
                    editable: false;
                  }
                };
              }
            }
          }
          Box {
            styles ["gp", "pd"]
            homogeneous: true;
            .CurrencySelector src_currency_selector {
              styles ["m-e"]
              notify::selected => _on_src_currency_changed();
              // selected: bind src_lang_selector.selected bidirectional;
              // tooltip-text: _("Change Source Language");
              // user-selection-changed => translation();
            }
            Button {
              styles ["custom", "circular", "accent"]
              icon-name: "system-reboot-symbolic";
              clicked => _invert_currencies();
            }
            .CurrencySelector dest_currency_selector {
              styles ["m-s"]
              notify::selected =>  _on_dest_currency_changed();
              // selected: bind src_lang_selector.selected bidirectional;
              // tooltip-text: _("Change Source Language");
              // user-selection-changed => translation();
            }
          }
          Box {
            Label info {
              styles ["m-s", "caption"]
              halign: start;
            }
            LinkButton disclaimer {
              styles [
                "caption",
              ]
              label: _("disclaimer");
            }
          }
        }
      }
    }
  }
}

menu primary_menu {
  section {
    item {
      label: _("_Preferences");
      action: "app.preferences";
    }

    item {
      label: _("_About currency converter");
      action: "app.about";
    }
  }
}
